#!/usr/bin/env python3

# 2018, Georg Sauthoff <mail@gms.tf>, GPLv3+

import contextlib
import subprocess
import sys

def mk_small_table(a='a'):
    print('static const char table[] = {')
    def fn(i, pref=''):
        x = i
        x += ord('0') if x < 10 else  ord(a) - 10
        print("{}/* 0x{:x} => */ '{}'".format(pref, i, chr(x)), end='')
    fn(0)
    for i in range(1, 16):
        fn(i, ',\n')
    print('\n};')
    print('''for (const u8 *i = begin; i != end; ++i) {
                    u8 x = *i;
		    u8 h = x >> 4;
		    u8 l = x & 0xf;
                    *o++ = table[h];
                    *o++ = table[l];
                }''')

def mk_table(little_endian=True, a='a'):
    print('static const uint16_t table[] = {')
    def fn(i, pref=''):
        if little_endian:
            lo = i>>4
            hi = i&0xf
        else:
            lo = i&0xf
            hi = i>>4
        lo += ord('0') if lo < 10 else ord(a) - 10
        hi += ord('0') if hi < 10 else ord(a) - 10
        print('{}/* 0x{:02x} => */ 0x{:02x}{:02x}'.format(pref, i, hi, lo), end='')
    fn(0)
    for i in range(1, 256):
        fn(i, ',\n')
    print('\n};')
    print('''for (const u8 *i = begin; i != end; ++i) {
                uint16_t x = table[*i];
                memcpy(o, &x, sizeof x);
                o += 2;
            }''')

head = '''// Generated by mk_bcd_lookup.py
// 2018, Georg Sauthoff <mail@gms.tf>
template <
    Convert convert = Convert::DIRECT,
    char A = 'a'
    > void decode_lookup(const u8 *begin, const u8 *end, char *o)'''


def main():
    print(head)
    print('{')
    print('if (convert == Convert::DIRECT) {')
    print('#ifndef __BYTE_ORDER__\n#error "__BYTE_ORDER__ macro not defined"')
    print('#elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__')
    print("if (A == 'a') {")
    mk_table(True, 'a')
    print("} else { // A == 'A'")
    mk_table(True, 'A')
    print('}')
    print('#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__')
    print("if (A == 'a') {")
    mk_table(False, 'a')
    print("} else { // A == 'A'")
    mk_table(False, 'A')
    print('}')
    print('#else\n#error "unknown byte order"')
    print('#endif')
    print('} else { // Convert::SMALL')
    print("if (A == 'a') {")
    mk_small_table('a')
    print("} else { // A == 'A'")
    mk_small_table('A')
    print('}')
    print('}')
    print('}')


if __name__ == '__main__':
    if subprocess.call(['which', 'clang-format'], stdout=subprocess.DEVNULL) == 0:
        with subprocess.Popen(['clang-format', ('--style={BasedOnStyle: webkit'
            ', NamespaceIndentation: All, AccessModifierOffset: 0 }')],
            stdin=subprocess.PIPE, universal_newlines=True) as p:
            with contextlib.redirect_stdout(p.stdin):
                sys.exit(main())
    else:
        sys.exit(main())


